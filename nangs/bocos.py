# AUTOGENERATED! DO NOT EDIT! File to edit: 01_bocos.ipynb (unless otherwise specified).

__all__ = ['Boco', 'PeriodicBoco', 'DirichletBoco']

# Cell

class Boco():
    "Base class to work with bocos"
    def __init__(self):
        self.type = None
        self.bs = None
        self.dataset = None
        self.DataLoader = None

    def addBoco(self, input_keys, output_keys):
        "This function is called when a PDE adds this boco"
        print('Override this function to add the required values')

    def check(self, inputs, outputs, params):
        print('Override this function to check everything is ok')

    def summary(self, input_keys, output_keys, param_keys):
        print('Override this function to print the boco summary')

    def setSolverParams(self, bs):
        self.bs = bs

# Cell

from .utils import *

class PeriodicBoco(Boco):
    "Periodic boundary condition: The outputs of both inputs will be enforced to be equal."
    def __init__(self, inputs1, inputs2):
        super().__init__()
        self.type = 'periodic'

        # check for dict with numpy arrays, same inputs and same length
        checkValidDict(inputs1)
        checkValidDict(inputs2)
        if len(inputs1) != len(inputs2):
            raise Exception('Inputs must have the same length !')
        for k in inputs1:
            if k not in inputs2:
                raise Exception(k + ' must be present in both inputs !')
            if len(inputs1[k]) != len(inputs2[k]):
                raise Exception(k + ' must have same length in both inputs !')

        self.inputs1 = inputs1
        self.inputs2 = inputs2

    def addBoco(self, input_keys, output_keys):
        "This function is called when a PDE adds this boco"

        # check that all inputs are present
        checkDictArray(self.inputs1, input_keys)
        checkDictArray(self.inputs2, input_keys)

        # create empty list with same dimensions that inputs in pde
        inputs1_values = [[] for i in input_keys]
        inputs2_values = [[] for i in input_keys]

        # extract arrays from dict and store in list, ordered by inputs in the pde
        for k in self.inputs1:
            ix = input_keys.index(k)
            inputs1_values[ix] = self.inputs1[k]

        for k in self.inputs2:
            ix = input_keys.index(k)
            inputs2_values[ix] = self.inputs2[k]

        self.inputs1 = inputs1_values
        self.inputs2 = inputs2_values

    def summary(self, input_keys, output_keys, param_keys):
        print('Periodic Boco Summary:')
        print('Input 1: ', {name: values for name, values in zip(input_keys, self.inputs1)})
        print('Input 2: ', {name: values for name, values in zip(input_keys, self.inputs2)})
        print('')

# Cell

class DirichletBoco(Boco):
    "Dirichlet boundary condition: Fixed outputs."
    def __init__(self, inputs, outputs):
        super().__init__()
        self.type = 'dirichlet'

        # check for dict with numpy arrays
        checkValidDict(inputs)
        checkValidDict(outputs)

        # ckeck outputs has correct length
        s = 1
        for k in inputs:
            s *= len(inputs[k])
        for k in outputs:
            if len(outputs[k]) != s:
                raise Exception(f"length of {k} incorrect")


        self.inputs = inputs
        self.outputs = outputs


    def addBoco(self, input_keys, output_keys):
        # check that the length of the inputs is the same than the outputs

        # check that all inputs and outputs are present
        checkDictArray(self.inputs, input_keys)
        checkDictArray(self.outputs, output_keys)

        # create empty list with same dimensions that inputs in pde
        inputs = [[] for i in input_keys]
        outputs = [[] for i in output_keys]

        # extract arrays from dict and store in list, ordered by inputs in the pde
        for k in self.inputs:
            ix = input_keys.index(k)
            inputs[ix] = self.inputs[k]

        for k in self.outputs:
            ix = output_keys.index(k)
            outputs[ix] = self.outputs[k]

        self.inputs = inputs
        self.outputs = outputs

    def summary(self, input_keys, output_keys, param_keys):
        print('Dirichlet Boco Summary:')
        print('Inputs: ', {name: values for name, values in zip(input_keys, self.inputs)})
        print('Outputs: ', {name: values for name, values in zip(output_keys, self.outputs)})
        print('')